<?php
/**
 * @file
 */

/**
 * Implements hook_permission().
 */
function pwa_permission() {
  return [
    'administer pwa' => [
      'title' => t('Administer Progressive Web App configuration'),
      'restrict access' => TRUE,
    ],
    'access pwa' => [
      'title' => t('Access Progressive Web App'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function pwa_menu() {
  $items = [];

  $items['pwa/%/serviceworker.js'] = [
    'page callback' => 'pwa_serviceworker_file_data',
    'page arguments' => [2],
    'access arguments' => ['access pwa'],
    'delivery callback' => 'pwa_deliver_js_file',
    'file' => 'pwa.pages.inc',
    'type' => MENU_CALLBACK,
  ];

  $items['offline'] = [
    'page callback' => 'pwa_offline_page',
    'access arguments' => ['access pwa'],
    'file' => 'pwa.pages.inc',
    'type' => MENU_CALLBACK,
  ];

  $items['admin/config/system/pwa'] = [
    'title' => 'Progressive Web App configuration',
    'description' => 'Configure manifest and service worker strategy.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['pwa_admin_configuration'],
    'access arguments' => ['administer pwa'],
    'file' => 'pwa.admin.inc',
  ];

  return $items;
}

/**
 * Implements hook_library().
 */
function pwa_library() {
  $path = drupal_get_path('module', 'pwa');
  return [
    'serviceworker' => [
      'version' => '0.1',
      'js' => [
        $path . '/js/serviceworker-load.js' => ['scope' => 'footer'],
        0 => [
          'data' => ['pwa' => ['path' => url('/pwa/%/serviceworker.js')]],
          'type' => 'setting',
        ],
      ],
      'dependencies' => [
        // Drupal.settings.
      ]
    ]
  ];
}

/**
 * Generate the JSON of the manifest file.
 *
 * @return string
 */
function pwa_manifest_file() {
  $path = drupal_get_path('module', 'pwa');
  $manifest = [
    'name' => variable_get('pwa_name', variable_get('site_name')),
    'short_name' => variable_get('pwa_short_name', variable_get('site_name')),
    'background_color' => variable_get('pwa_background_color', '#ffffff'),
    'theme_color' => variable_get('pwa_theme_color', '#ffffff'),
    'start_url' => variable_get('pwa_start_url', '/'),
    'orientation' => variable_get('pwa_orientation', 'portrait'),
    'display' => variable_get('pwa_display', 'standalone'),
    // @todo make configurable.
    'icons' => [
      [
        'src' => url($path . '/assets/druplicon-144.png'),
        'sizes' => '144x144',
        'type' => 'image/png',
      ],
      [
        'src' => url($path . '/assets/druplicon-vector.svg'),
        'type' => 'image/svg+xml',
      ],
    ],
  ];
  drupal_alter('pwa_manifest', $manifest);
  return drupal_json_encode($manifest);
}

/**
 * Take the serviceworker template file and replace all the variables needed.
 *
 * @return string
 */
function pwa_serviceworker_file() {
  $path = drupal_get_path('module', 'pwa');
  $sw = file_get_contents($path . '/js/serviceworker.js');
  $cacheUrls = (array) preg_split("/\r\n|\n|\r/", trim(variable_get('pwa_swcache_urls', '')));
  foreach ($cacheUrls as &$url) {
    $url = url($url);
  }
  $replace = [
    '[/*cacheConditionsExclude*/]' => drupal_json_encode((array) preg_split("/\r\n|\n|\r/", trim(variable_get('pwa_swcache_exclude', '')))),
    '[/*cacheUrls*/]' => drupal_json_encode($cacheUrls),
    '[/*cacheUrlsAssets*/]' => drupal_json_encode(_pwa_fetch_offline_page_ressources($cacheUrls)),
    '1/*cacheVersion*/' => variable_get('pwa_swcache_version', 1),
    '/offline' => url('/offline'),
    'offline-image.png' => file_create_url(drupal_get_path('module', 'pwa') . '/assets/offline-image.png'),
  ];
  return str_replace(array_keys($replace), array_values($replace), $sw);
}

/**
 * Implements hook_page_alter().
 */
function pwa_preprocess_html(&$variables) {
  if (!user_access('access pwa')) {
    return;
  }

  drupal_add_html_head([
    '#tag' => 'link',
    '#attributes' => [
      'rel' => 'manifest',
      'href' => variable_get('pwa_filecache_manifest', ''),
    ],
  ], 'manifest');

  drupal_add_library('pwa', 'serviceworker');
  drupal_add_js(['pwa' => ['path' => url('pwa/' . variable_get('pwa_swcache_version', 1) . '/serviceworker.js')]], 'setting');
}

/**
 * Implements hook_flush_caches().
 */
function pwa_flush_caches() {
  $scheme = file_default_scheme();
  $directory =  $scheme . '://pwa';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

  // Create the manifest file, create a static file with all the data.
  $manifest = pwa_manifest_file();
  $manifest_uri = file_unmanaged_save_data($manifest, $scheme . '://pwa/manifest.json', FILE_EXISTS_REPLACE);
  $manifest_url = file_create_url($manifest_uri);
  variable_set('pwa_filecache_manifest', str_replace($GLOBALS['base_url'] . '/', base_path(), $manifest_url));

  // Create the serviceworker file in cache so it can be served from a menu
  // callback so additional headers can be sent with the file.
  // @see pwa_deliver_js_file().
  cache_set('pwa:serviceworker', pwa_serviceworker_file(), 'cache');
}

/**
 * List all JS and CSS assets present in $pages so they can be cached.
 *
 * @param $pages
 *
 * @return array
 */
function _pwa_fetch_offline_page_ressources($pages) {
  $ressources = [];

  foreach ($pages as $page) {
    $response = drupal_http_request(url($page, ['absolute' => TRUE]));
    if (explode('/', $response->headers['content-type'], 2)[0] === 'image') {
      break;
    }
    $dom = new DOMDocument();
    // Ignore warnings during HTML soup loading.
    @$dom->loadHTML($response->data);
    $xpath = new DOMXPath($dom);

    $ressources = [];
    foreach ($xpath->query('//script[@src]') as $script) {
      $ressources[] = $script->getAttribute('src');
    }
    foreach ($xpath->query('//link[@rel="stylesheet"]') as $stylesheet) {
      $ressources[] = $stylesheet->getAttribute('href');
    }
    foreach ($xpath->query('//img[@src]') as $stylesheet) {
      $ressources[] = $stylesheet->getAttribute('src');
    }
  }

  $dedup = array_unique($ressources);
  return $dedup;
}
